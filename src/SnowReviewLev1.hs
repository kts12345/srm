module SnowReviewLev1 where
------------------------------------------------------
h :: ([[a]], [[a]]) -> a -> ([[a]], [[a]])
h (ass, bss) a = (ass',bss')  -- ([], [[1]]) 2 => ([[1]], [[2],[1,2]])
    where
        ass' = ass ++ bss
        bss' = [a:bs| bs <- []:bss]
------------------------------------------------------
findSum :: Integral a => [a] -> a
findSum ls  =
        last               $ --               |                       |    1 +  2 +  3    +   3 +  5   +  6 =  20
        map (sum.concat)   $ -- [        1    |    1  +   2 +  3      |    1 +  2 +  3    +   3 +  5   +  6       ]
        map (uncurry (++)) $ -- [ [     [1] ] | [ [1],   [2], [1,2]]  | [ [1], [2], [1,2] ,  [3], [2,3], [1,2,3]  ]
        scanl h ([],[])    $ -- [ ([], [[1]]) | ([[1]], [[2], [1,2]]) | ([[1], [2], [1,2]], [[3], [2,3], [1,2,3]] )
        ls                   -- [ 1           |  2                    | 3                                        ]
------------------------------------------------------
-- | The main entry point.
main :: IO ()
main = do
        print $ findSum [1,2,3] -- 20
        print $ findSum [1,2] -- 6
        print $ findSum [1,1,1] -- 10
        print $ findSum [3,14,15,92,65] -- 1323
        print $ findSum [1,2,3,4,5,6,7,8,9,10] -- 1210
